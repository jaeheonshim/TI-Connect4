	section	.text,"ax",@progbits
	assume	adl = 1
	section	.text,"ax",@progbits
	public	_c_findbestmove
_c_findbestmove:
	ld	hl, -15
	call	__frameset
	ld	iy, 0
	ld	de, -1000
	ld	(ix + -6), de
	ld	de, 7
	lea	bc, iy + 0
BB0_1:
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	jq	z, BB0_2
	ld	(ix + -9), iy
	push	bc
	ld	hl, (ix + 6)
	push	hl
	ld	(ix + -3), bc
	call	_c_canplace
	pop	de
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB0_4
	ld	bc, (ix + -3)
	ld	iy, (ix + -9)
	jq	BB0_11
BB0_4:
	ld	hl, (ix + 6)
	push	hl
	call	_c_copyboard
	push	hl
	pop	de
	ld	(ix + -12), de
	pop	hl
	ld	hl, (ix + -3)
	push	hl
	push	de
	call	_c_place
	pop	hl
	pop	hl
	ld	hl, (ix + 12)
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	hl, (ix + 9)
	push	hl
	ld	hl, (ix + -12)
	push	hl
	call	_c_minimax
	ld	(ix + -15), hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix + -12)
	push	hl
	call	_c_freeboard
	pop	hl
	ld	de, (ix + -6)
	push	de
	pop	hl
	ld	bc, (ix + -15)
	push	bc
	pop	iy
	or	a, a
	sbc	hl, bc
	call	__setflag
	ld	a, 1
	jq	m, BB0_6
	ld	a, 0
BB0_6:
	bit	0, a
	jq	nz, BB0_8
	push	de
	pop	iy
BB0_8:
	bit	0, a
	ld	bc, (ix + -3)
	push	bc
	pop	hl
	jq	nz, BB0_10
	ld	hl, (ix + -9)
BB0_10:
	ld	(ix + -6), iy
	push	hl
	pop	iy
BB0_11:
	inc	bc
	ld	de, 7
	jq	BB0_1
BB0_2:
	lea	hl, iy + 0
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_c_minimax
_c_minimax:
	ld	hl, -15
	call	__frameset
	ld	bc, (ix + 6)
	ld	hl, (ix + 9)
	ld	iy, (ix + 15)
	ld	de, 1
	ld	(ix + -3), hl
	or	a, a
	sbc	hl, de
	call	__setflag
	jq	m, BB1_12
	push	bc
	call	_c_getwinner
	ld	iy, (ix + 15)
	ld	bc, (ix + 6)
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB1_12
	ld	hl, (ix + 12)
	ld	de, (ix + -3)
	dec	de
	ld	(ix + -3), de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB1_14
	ld	hl, 1000
	ld	(ix + -6), hl
	ld	iy, 0
BB1_4:
	lea	hl, iy + 0
	ld	de, 7
	or	a, a
	sbc	hl, de
	jq	z, BB1_22
	push	iy
	push	bc
	ld	(ix + -9), iy
	call	_c_canplace
	pop	de
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB1_10
	ld	hl, (ix + 6)
	push	hl
	call	_c_copyboard
	ld	(ix + -12), hl
	pop	de
	ld	de, (ix + -9)
	push	de
	push	hl
	call	_c_place
	pop	hl
	pop	hl
	ld	hl, (ix + 15)
	push	hl
	ld	hl, 1
	push	hl
	ld	hl, (ix + -3)
	push	hl
	ld	hl, (ix + -12)
	push	hl
	call	_c_minimax
	ld	(ix + -15), hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix + -12)
	push	hl
	call	_c_freeboard
	ld	bc, (ix + -15)
	pop	hl
	push	bc
	pop	hl
	ld	de, (ix + -6)
	or	a, a
	sbc	hl, de
	call	__setflag
	jq	m, BB1_9
	push	de
	pop	bc
BB1_9:
	ld	(ix + -6), bc
BB1_10:
	ld	bc, (ix + 6)
	ld	iy, (ix + -9)
	inc	iy
	jq	BB1_4
BB1_12:
	push	iy
	push	bc
	call	_c_evalpos
	push	hl
	pop	de
	pop	hl
	pop	hl
BB1_13:
	ex	de, hl
	ld	sp, ix
	pop	ix
	ret
BB1_14:
	ld	de, -1000
	ld	iy, 0
BB1_15:
	lea	hl, iy + 0
	ld	bc, 7
	or	a, a
	sbc	hl, bc
	jq	z, BB1_13
	ld	(ix + -6), de
	push	iy
	ld	hl, (ix + 6)
	push	hl
	ld	(ix + -9), iy
	call	_c_canplace
	pop	de
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB1_18
	ld	de, (ix + -6)
	jq	BB1_21
BB1_18:
	ld	hl, (ix + 6)
	push	hl
	call	_c_copyboard
	ld	(ix + -12), hl
	pop	de
	ld	de, (ix + -9)
	push	de
	push	hl
	call	_c_place
	pop	hl
	pop	hl
	ld	hl, (ix + 15)
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	hl, (ix + -3)
	push	hl
	ld	hl, (ix + -12)
	push	hl
	call	_c_minimax
	ld	(ix + -15), hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix + -12)
	push	hl
	call	_c_freeboard
	ld	bc, (ix + -15)
	pop	hl
	ld	de, (ix + -6)
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	call	__setflag
	jq	m, BB1_20
	push	de
	pop	bc
BB1_20:
	push	bc
	pop	de
BB1_21:
	ld	iy, (ix + -9)
	inc	iy
	jq	BB1_15
BB1_22:
	ld	de, (ix + -6)
	jq	BB1_13
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_c_evalpos
_c_evalpos:
	ld	hl, -30
	call	__frameset
	ld	hl, (ix + 6)
	push	hl
	call	_c_getwinner
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB2_19
	ld	de, 6
	ld	iy, 0
	ld	(ix + -3), iy
	lea	bc, iy + 0
BB2_2:
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	jq	z, BB2_21
	ld	(ix + -6), bc
	push	bc
	pop	hl
	ld	bc, 3
	call	__imulu
	push	hl
	pop	de
	ld	hl, (ix + 6)
	add	hl, de
	ld	(ix + -12), hl
	lea	bc, iy + 0
BB2_4:
	push	bc
	pop	hl
	ld	de, 7
	or	a, a
	sbc	hl, de
	jq	z, BB2_18
	ld	hl, (ix + -12)
	ld	hl, (hl)
	add	hl, bc
	ld	e, (hl)
	ld	a, e
	rlc	a
	sbc	hl, hl
	ld	a, e
	or	a, a
	jq	z, BB2_17
	ld	l, e
	ld	(ix + -18), hl
	lea	hl, iy + 0
BB2_8:
	push	hl
	pop	iy
	ld	de, 8
	or	a, a
	sbc	hl, de
	jq	z, BB2_16
	ld	(ix + -15), bc
	ld	(ix + -24), iy
	lea	hl, iy + 0
	ld	bc, 6
	call	__imulu
	ld	bc, (ix + 9)
	push	hl
	pop	de
	ld	hl, _transforms
	add	hl, de
	ld	(ix + -21), hl
	or	a, a
	sbc	hl, hl
	ld	(ix + -9), hl
BB2_10:
	ld	hl, (ix + -9)
	ld	de, 3
	or	a, a
	sbc	hl, de
	jq	z, BB2_13
	ld	bc, (ix + -9)
	inc	bc
	ld	hl, (ix + -21)
	ld	hl, (hl)
	call	__imulu
	ld	de, (ix + -6)
	add	hl, de
	ld	(ix + -27), hl
	ld	iy, (ix + -21)
	ld	hl, (iy + 3)
	ld	(ix + -30), bc
	call	__imulu
	ld	de, (ix + -15)
	add	hl, de
	ld	de, (ix + -18)
	push	de
	push	hl
	ld	hl, (ix + -27)
	push	hl
	ld	hl, (ix + 6)
	push	hl
	call	_placeable
	ld	bc, (ix + 9)
	pop	de
	pop	de
	pop	de
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB2_13
	ld	hl, (ix + -30)
	ld	(ix + -9), hl
	jq	BB2_10
BB2_13:
	or	a, a
	sbc	hl, hl
	ld	de, (ix + -9)
	or	a, a
	sbc	hl, de
	ld	(ix + -21), hl
	ld	hl, (ix + -18)
	or	a, a
	sbc	hl, bc
	push	de
	pop	iy
	jq	z, BB2_15
	ld	iy, (ix + -21)
BB2_15:
	ld	de, (ix + -3)
	add	iy, de
	ld	hl, (ix + -24)
	inc	hl
	ld	(ix + -3), iy
	ld	bc, (ix + -15)
	jq	BB2_8
BB2_16:
	ld	iy, 0
BB2_17:
	inc	bc
	jq	BB2_4
BB2_18:
	ld	bc, (ix + -6)
	inc	bc
	ld	de, 6
	jq	BB2_2
BB2_19:
	ld	de, (ix + 9)
	or	a, a
	sbc	hl, de
	jq	z, BB2_22
	ld	hl, -1000
	jq	BB2_23
BB2_21:
	ld	hl, (ix + -3)
	jq	BB2_23
BB2_22:
	ld	hl, 1000
BB2_23:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_placeable
_placeable:
	call	__frameset0
	ld	de, (ix + 9)
	ld	hl, (ix + 12)
	push	hl
	push	de
	call	_validpos
	ld	iy, (ix + 9)
	push	hl
	pop	de
	pop	hl
	pop	hl
	ld	bc, 5
	lea	hl, iy + 0
	or	a, a
	sbc	hl, bc
	call	__setflag
	jq	p, BB3_8
	ex	de, hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB3_2
	ld	l, 0
	jq	BB3_14
BB3_8:
	ex	de, hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	l, 0
	jq	z, BB3_14
	ld	bc, 3
	lea	hl, iy + 0
	call	__imulu
	push	hl
	pop	de
	ld	hl, (ix + 6)
	add	hl, de
	ld	hl, (hl)
	ld	de, (ix + 12)
	add	hl, de
	ld	e, (hl)
	ld	a, e
	or	a, a
	ld	a, 1
	ld	l, a
	jq	z, BB3_14
	ld	a, e
	rlc	a
	sbc	hl, hl
	ld	l, e
	ld	de, (ix + 15)
	or	a, a
	sbc	hl, de
	jq	z, BB3_11
	ld	l, 0
	jq	BB3_13
BB3_2:
	lea	hl, iy + 0
	inc	hl
	ld	bc, 3
	call	__imulu
	push	hl
	pop	de
	ld	hl, (ix + 6)
	add	hl, de
	ld	hl, (hl)
	ld	de, (ix + 12)
	add	hl, de
	ld	a, (hl)
	or	a, a
	ld	l, 0
	jq	z, BB3_14
	ld	bc, 3
	lea	hl, iy + 0
	call	__imulu
	push	hl
	pop	de
	ld	hl, (ix + 6)
	add	hl, de
	ld	hl, (hl)
	ld	de, (ix + 12)
	add	hl, de
	ld	e, (hl)
	ld	a, e
	or	a, a
	ld	a, 1
	ld	l, a
	jq	z, BB3_14
	ld	a, e
	rlc	a
	sbc	hl, hl
	ld	l, e
	ld	de, (ix + 15)
	or	a, a
	sbc	hl, de
	jq	z, BB3_5
	ld	l, 0
	jq	BB3_7
BB3_11:
	ld	l, 1
BB3_13:
	jq	BB3_14
BB3_5:
	ld	l, 1
BB3_7:
BB3_14:
	ld	bc, 1
	call	__iand
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.rodata,"a",@progbits
	private	_transforms
_transforms:
	dl	0
	dl	1
	dl	1
	dl	0
	dl	16777215
	dl	1
	dl	1
	dl	1
	dl	0
	dl	16777215
	dl	16777215
	dl	0
	dl	1
	dl	16777215
	db	6 dup 255

	ident	"clang version 12.0.0 (https://github.com/jacobly0/llvm-project 170be88120e3aa88c20eea5615ba76b8f1d6c647)"
	extern	_c_copyboard
	extern	_c_place
	extern	__Unwind_SjLj_Register
	extern	__frameset
	extern	_validpos
	extern	__setflag
	extern	__Unwind_SjLj_Unregister
	extern	__iand
	extern	__imulu
	extern	_c_canplace
	extern	_c_freeboard
	extern	_c_getwinner
	extern	__frameset0
