	section	.text,"ax",@progbits
	assume	adl = 1
	section	.text,"ax",@progbits
	public	_c_newboard
_c_newboard:
	ld	hl, -6
	call	__frameset
	ld	hl, 18
	push	hl
	call	_malloc
	ld	(ix + -3), hl
	pop	hl
	ld	de, 6
	ld	bc, 0
BB0_1:
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	jq	z, BB0_2
	ld	hl, 7
	push	hl
	ld	(ix + -6), bc
	call	_malloc
	push	hl
	pop	iy
	pop	hl
	ld	hl, (ix + -6)
	ld	bc, 3
	call	__imulu
	ld	bc, 7
	push	hl
	pop	de
	ld	hl, (ix + -3)
	add	hl, de
	ld	(hl), iy
	ld	de, 0
BB0_4:
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	jq	z, BB0_5
	lea	hl, iy + 0
	add	hl, de
	ld	(hl), 0
	inc	de
	jq	BB0_4
BB0_5:
	ld	bc, (ix + -6)
	inc	bc
	ld	de, 6
	jq	BB0_1
BB0_2:
	ld	hl, (ix + -3)
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_c_freeboard
_c_freeboard:
	ld	hl, -9
	call	__frameset
	ld	iy, (ix + 6)
	ld	de, 5
	ld	(ix + -3), iy
	lea	iy, iy + 15
	ld	bc, 0
BB1_1:
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	call	__setflag
	jq	m, BB1_2
	ld	hl, (iy)
	push	hl
	ld	(ix + -6), de
	ld	(ix + -9), iy
	call	_free
	ld	bc, 0
	ld	iy, (ix + -9)
	ld	de, (ix + -6)
	pop	hl
	dec	de
	lea	iy, iy + -3
	jq	BB1_1
BB1_2:
	ld	hl, (ix + -3)
	ld	(ix + 6), hl
	ld	sp, ix
	pop	ix
	jp	_free
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_c_place
_c_place:
	ld	hl, -3
	call	__frameset
	ld	iy, (ix + 6)
	ld	de, (ix + 9)
	or	a, a
	sbc	hl, hl
	lea	bc, iy + 0
	ld	iy, (iy)
	add	iy, de
	ld	a, (iy)
	or	a, a
	jq	nz, BB2_7
	push	bc
	call	_c_nexttoken
	ld	(ix + -3), hl
	pop	hl
	ld	bc, 5
	ld	iy, (ix + 6)
	lea	iy, iy + 15
	ld	de, 0
BB2_2:
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	call	__setflag
	jq	m, BB2_8
	push	bc
	pop	de
	ld	hl, (iy)
	ld	bc, (ix + 9)
	add	hl, bc
	ld	a, (hl)
	or	a, a
	jq	z, BB2_4
	push	de
	pop	bc
	dec	bc
	lea	iy, iy + -3
	ld	de, 0
	jq	BB2_2
BB2_8:
	ld	bc, -1
	push	bc
	pop	hl
	jq	BB2_6
BB2_4:
	ld	bc, (ix + -3)
	ld	a, c
	ld	(hl), a
	ld	bc, -1
	ex	de, hl
BB2_6:
	call	__ixor
	ld	c, 23
	call	__ishru
BB2_7:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_c_canplace
_c_canplace:
	call	__frameset0
	ld	hl, (ix + 6)
	ld	de, (ix + 9)
	ld	hl, (hl)
	add	hl, de
	ld	a, (hl)
	or	a, a
	jq	z, BB3_1
	ld	a, 0
	jq	BB3_3
BB3_1:
	ld	a, 1
BB3_3:
	and	a, 1
	or	a, a
	sbc	hl, hl
	ld	l, a
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_c_nexttoken
_c_nexttoken:
	ld	hl, -9
	call	__frameset
	ld	iy, 0
	ld	de, 6
	ld	(ix + -6), iy
	ld	(ix + -3), iy
BB4_1:
	lea	hl, iy + 0
	or	a, a
	sbc	hl, de
	jq	z, BB4_3
	lea	hl, iy + 0
	ld	bc, 3
	call	__imulu
	push	hl
	pop	de
	ld	hl, (ix + 6)
	add	hl, de
	ld	hl, (hl)
	ld	(ix + -9), hl
	ld	bc, 0
BB4_6:
	push	bc
	pop	hl
	ld	de, 7
	or	a, a
	sbc	hl, de
	jq	z, BB4_7
	ld	hl, (ix + -9)
	add	hl, bc
	ld	a, (hl)
	cp	a, -1
	jq	nz, BB4_9
	ld	hl, (ix + -3)
	inc	hl
	ld	(ix + -3), hl
	jq	BB4_12
BB4_9:
	cp	a, 1
	jq	nz, BB4_13
	ld	hl, (ix + -6)
	inc	hl
	ld	(ix + -6), hl
	jq	BB4_12
BB4_13:
BB4_12:
	inc	bc
	jq	BB4_6
BB4_7:
	inc	iy
	ld	de, 6
	jq	BB4_1
BB4_3:
	ld	hl, (ix + -3)
	ld	de, (ix + -6)
	or	a, a
	sbc	hl, de
	call	__setflag
	ld	hl, -1
	jq	m, BB4_5
	ld	hl, 1
BB4_5:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_c_getwinner
_c_getwinner:
	ld	hl, -42
	call	__frameset
	ld	iy, 0
	lea	hl, ix + -12
	ld	(ix + -15), hl
	ld	de, 6
	lea	bc, iy + 0
BB5_1:
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	jq	z, BB5_25
	ld	(ix + -18), bc
	push	bc
	pop	hl
	ld	bc, 3
	call	__imulu
	ld	iy, 0
	push	hl
	pop	de
	ld	hl, (ix + 6)
	add	hl, de
	ld	hl, (hl)
	ld	(ix + -21), hl
	lea	bc, iy + 0
BB5_3:
	push	bc
	pop	hl
	ld	de, 7
	or	a, a
	sbc	hl, de
	jq	z, BB5_20
	ld	hl, (ix + -21)
	add	hl, bc
	ld	e, (hl)
	ld	a, e
	or	a, a
	jq	nz, BB5_5
	ld	de, (ix + -30)
	jq	BB5_19
BB5_5:
	ld	a, e
	rlc	a
	sbc	hl, hl
	ld	l, e
	ld	(ix + -12), hl
	ld	(ix + -9), hl
	ld	(ix + -6), hl
	ld	(ix + -3), hl
	ld	de, 1
	ex	de, hl
	ld	(ix + -24), bc
BB5_6:
	ld	(ix + -27), hl
	ld	de, 4
	or	a, a
	sbc	hl, de
	jq	z, BB5_22
	ld	hl, (ix + -15)
	ld	(ix + -33), hl
	lea	hl, iy + 0
	ld	(ix + -36), iy
BB5_8:
	push	hl
	pop	bc
	ld	de, 24
	or	a, a
	sbc	hl, de
	jq	z, BB5_9
	ld	(ix + -39), bc
	ld	iy, _transforms
	add	iy, bc
	ld	hl, (iy)
	ld	bc, (ix + -27)
	call	__imulu
	ld	de, (ix + -18)
	add	hl, de
	ld	(ix + -42), hl
	ld	hl, (iy + 3)
	call	__imulu
	ld	de, (ix + -24)
	add	hl, de
	push	hl
	pop	de
	ld	bc, 7
	or	a, a
	sbc	hl, bc
	jq	nc, BB5_13
	ld	hl, (ix + -42)
	ld	bc, 6
	or	a, a
	sbc	hl, bc
	jq	c, BB5_12
BB5_13:
	ld	de, (ix + -36)
	push	de
	pop	hl
	ld	bc, 3
	call	__imulu
	push	hl
	pop	bc
	ld	hl, (ix + -15)
	add	hl, bc
	ld	iy, (ix + -33)
BB5_14:
	ld	bc, 0
	ld	(hl), bc
BB5_15:
	inc	de
	ld	(ix + -36), de
	ld	bc, 6
	ld	hl, (ix + -39)
	add	hl, bc
	lea	iy, iy + 3
	ld	(ix + -33), iy
	ld	iy, 0
	jq	BB5_8
BB5_12:
	ld	hl, (ix + -42)
	ld	bc, 3
	call	__imulu
	push	hl
	pop	bc
	ld	iy, (ix + 6)
	lea	hl, iy + 0
	add	hl, bc
	ld	hl, (hl)
	add	hl, de
	ld	a, (hl)
	ld	l, a
	rlc	l
	sbc	hl, hl
	push	hl
	pop	bc
	ld	c, a
	ld	iy, (ix + -33)
	ld	hl, (iy)
	or	a, a
	sbc	hl, bc
	lea	hl, iy + 0
	ld	de, (ix + -36)
	jq	nz, BB5_14
	jq	BB5_15
BB5_9:
	ld	hl, (ix + -27)
	inc	hl
	ld	bc, (ix + -24)
	jq	BB5_6
BB5_22:
	ld	hl, (ix + -15)
	ld	(ix + -27), hl
	lea	bc, iy + 0
BB5_16:
	push	bc
	pop	iy
	lea	hl, iy + 0
	ld	de, 4
	or	a, a
	sbc	hl, de
	jq	z, BB5_23
	ld	hl, (ix + -27)
	ld	de, (hl)
	lea	bc, iy + 0
	inc	bc
	lea	hl, iy + 0
	ld	iy, (ix + -27)
	lea	iy, iy + 3
	ld	(ix + -27), iy
	push	hl
	pop	iy
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB5_16
	jq	BB5_18
BB5_23:
	ld	de, (ix + -30)
BB5_18:
	lea	hl, iy + 0
	ld	bc, 4
	or	a, a
	sbc	hl, bc
	ld	iy, 0
	ld	bc, (ix + -24)
	jq	c, BB5_21
BB5_19:
	inc	bc
	ld	(ix + -30), de
	jq	BB5_3
BB5_20:
	ld	bc, (ix + -18)
	inc	bc
	ld	de, 6
	jq	BB5_1
BB5_25:
	lea	de, iy + 0
BB5_21:
	ex	de, hl
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_validpos
_validpos:
	call	__frameset0
	ld	hl, (ix + 6)
	ld	de, 0
	ld	bc, 6
	or	a, a
	sbc	hl, bc
	jq	nc, BB6_7
	ld	iy, (ix + 9)
	ld	bc, 0
	lea	hl, iy + 0
	or	a, a
	sbc	hl, bc
	call	__setflag
	jq	m, BB6_6
	ld	de, 7
	lea	hl, iy + 0
	or	a, a
	sbc	hl, de
	call	__setflag
	jq	m, BB6_3
	ld	a, 0
	jq	BB6_5
BB6_7:
	jq	BB6_6
BB6_3:
	ld	a, 1
BB6_5:
	and	a, 1
	ld	de, 0
	ld	e, a
BB6_6:
	ex	de, hl
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_c_printboard
_c_printboard:
	ld	hl, -9
	call	__frameset
	ld	de, 0
	ld	bc, 6
	push	de
	pop	iy
BB7_1:
	lea	hl, iy + 0
	or	a, a
	sbc	hl, bc
	jq	z, BB7_2
	lea	hl, iy + 0
	ld	bc, 3
	call	__imulu
	push	hl
	pop	bc
	ld	hl, (ix + 6)
	add	hl, bc
	ld	(ix + -6), hl
	push	de
	pop	bc
	ld	(ix + -3), iy
BB7_4:
	push	bc
	pop	hl
	ld	de, 7
	or	a, a
	sbc	hl, de
	jq	z, BB7_5
	ld	hl, (ix + -6)
	ld	hl, (hl)
	add	hl, bc
	ld	a, (hl)
	cp	a, -1
	ld	hl, 79
	jq	z, BB7_8
	ld	hl, 42
BB7_8:
	ld	(ix + -9), bc
	cp	a, 1
	ld	de, 88
	jq	z, BB7_10
	ex	de, hl
BB7_10:
	push	de
	ld	hl, L_.str
	push	hl
	call	_printf_
	pop	hl
	pop	hl
	ld	bc, (ix + -9)
	inc	bc
	jq	BB7_4
BB7_5:
	ld	hl, L_.str.1
	push	hl
	call	_printf_
	ld	iy, (ix + -3)
	ld	de, 0
	pop	hl
	inc	iy
	ld	bc, 6
	jq	BB7_1
BB7_2:
BB7_11:
	push	de
	pop	hl
	ld	bc, 7
	or	a, a
	sbc	hl, bc
	jq	z, BB7_12
	push	de
	ld	hl, L_.str.2
	push	hl
	ld	(ix + -3), de
	call	_printf_
	ld	de, (ix + -3)
	pop	hl
	pop	hl
	inc	de
	jq	BB7_11
BB7_12:
	ld	hl, L_.str.1
	push	hl
	call	_printf_
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_c_copyboard
_c_copyboard:
	ld	hl, -9
	call	__frameset
	call	_c_newboard
	ld	(ix + -3), hl
	ld	de, 6
	ld	iy, 0
BB8_1:
	lea	hl, iy + 0
	or	a, a
	sbc	hl, de
	jq	z, BB8_3
	lea	hl, iy + 0
	ld	bc, 3
	call	__imulu
	push	hl
	pop	de
	ld	hl, (ix + 6)
	add	hl, de
	ld	(ix + -6), hl
	ld	hl, (ix + -3)
	add	hl, de
	ld	hl, (hl)
	ld	(ix + -9), hl
	ld	bc, 0
BB8_4:
	push	bc
	pop	hl
	ld	de, 7
	or	a, a
	sbc	hl, de
	jq	z, BB8_5
	ld	hl, (ix + -6)
	ld	hl, (hl)
	add	hl, bc
	ld	a, (hl)
	ld	hl, (ix + -9)
	add	hl, bc
	ld	(hl), a
	inc	bc
	jq	BB8_4
BB8_5:
	inc	iy
	ld	de, 6
	jq	BB8_1
BB8_3:
	ld	hl, (ix + -3)
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.rodata,"a",@progbits
	private	_transforms
_transforms:
	dl	0
	dl	1
	dl	1
	dl	0
	dl	1
	dl	16777215
	dl	1
	dl	1

	section	.rodata,"a",@progbits
	private	L_.str
L_.str:
	db	"%c ",000o

	section	.rodata,"a",@progbits
	private	L_.str.1
L_.str.1:
	db	"",012o,000o

	section	.rodata,"a",@progbits
	private	L_.str.2
L_.str.2:
	db	"%d ",000o

	ident	"clang version 12.0.0 (https://github.com/jacobly0/llvm-project 170be88120e3aa88c20eea5615ba76b8f1d6c647)"
	extern	__Unwind_SjLj_Register
	extern	__frameset
	extern	_malloc
	extern	_printf_
	extern	__ishru
	extern	__setflag
	extern	__Unwind_SjLj_Unregister
	extern	__ixor
	extern	__imulu
	extern	_free
	extern	__frameset0
